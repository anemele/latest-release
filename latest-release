/**
 * This is an extensible module,
 * include the target name, url, callback function,
 * and the enable.
 *
 * About the callback function, click the url for more detail.
 */

const cheerio = require('cheerio');

// set flag false to DEBUG mode
const flag = true;

module.exports = [{
    name: 'Rust',
    enable: flag && false,
    url: 'https://www.rust-lang.org/',
    cb: data => {
        let $ = cheerio.load(data)
        let a = $('a.download-link')
        let href = a.attr('href')
        let tmp = href.split('rust-lang.org/')[1].slice(0, -5).split('/')
        let date = tmp.slice(0, 3).join('-')
        console.log('\t' + tmp[3] + '\t' + date)
    }
}, {
    name: 'Python',
    enable: flag && true,
    url: 'https://www.python.org/downloads/',
    cb: data => {
        let $ = cheerio.load(data)
        let lis = $('div.download-list-widget ol.list-row-container li')
        for (let i = 0; i < 3; i++) {
            let li = lis.eq(i)
            let number = li.find('span.release-number').text().trim().split(' ')[1]
            let date = li.find('span.release-date').text().trim()
            console.log('\t' + number + '\t' + date)
        }
    }
}, {
    name: 'Node.js',
    enable: flag && false,
    url: 'https://nodejs.org/node-releases-data.json',
    cb: data => {
        let json = data
        let cur = json[0]
        let lts = json[2]
        console.log('\tNode.js\t'
            + cur.version + '\t'
            + cur.releaseDate)
        console.log('\tNode.js\t'
            + lts.version + '\t'
            + lts.releaseDate)
    }
}, {
    name: 'Node.js',
    enable: flag && false,
    url: 'https://nodejs.org/en',
    cb: data => {
        let $ = cheerio.load(data)
        let ver = $('#home-intro div.home-downloadblock > a')
        for (let i = 0; i < 2; i++) {
            let v = ver.eq(i).attr('data-version')
            console.log('\tNode.js\t' + v)
        }
    }
}, {
    name: 'Deno',
    enable: flag && true,
    url: 'https://github.com/denoland/deno/releases',
    cb: data => {
        let $ = cheerio.load(data)
        let h3 = $('h3')
        for (let i = 0; i < 3; i++) {
            console.log('\t' + h3.eq(i).text().trim().replace('/', ''))
        }
    }
}, {
    name: 'Java',
    enable: flag && false,
    url: 'https://www.oracle.com/java/technologies/java-se-glance.html',
    cb: data => {
        let $ = cheerio.load(data)
        let lis = $('ul.cta-list > li:nth-child(1) > p:nth-child(2)')
        const regex = /(.+?) is the latest release/
        for (let i = 0; i < lis.length; i++) {
            let match = lis.eq(i).text().trim().match(regex)
            if (match) { console.log('\t' + match[1]) }
        }
    }
}, {
    name: 'Lua',
    enable: flag && false,
    url: 'https://www.lua.org/versions.html',
    cb: data => {
        let $ = cheerio.load(data)
        let lis = $('p')
        const regex = /The current release.[\s\S]+?(Lua [\d\.]+)[\s\S]+?released on ([0-9 a-zA-z]+?)\./
        // 2
        for (let i = 0; i < lis.length; i++) {
            let match = lis.eq(i).text().trim().match(regex)
            if (match) {
                console.log('\t' + match[1] + '\t' + match[2])
            }
        }
    }
}, {
    name: 'Julia',
    enable: flag && false,
    url: 'https://julialang.org/downloads/',
    cb: data => {
        let $ = cheerio.load(data)
        const regex = /[\s\S]+?(v[\d\.]+)[\s]\(([0-9a-zA-Z, ]+?)\)/

        let csMatch = $('#current_stable_release a').text()
            .trim().match(regex)
        if (csMatch) {
            console.log('\t' + csMatch[1] + ' Current\t' + csMatch[2])
        }
        let lsMatch = $('#long_term_support_release a').text()
            .trim().match(regex)
        if (lsMatch) {
            console.log('\t' + lsMatch[1] + ' LTS\t' + lsMatch[2])
        }
    }
}, {
    name: 'Go',
    enable: flag && false,
    url: 'https://golang.google.cn/dl',
    cb: data => {
        let $ = cheerio.load(data)
        let css = 'div.toggleVisible > div.expanded > h3.toggleButton > span'
        let span = $(css)
        for (let i = 0; i < span.length; i++) {
            console.log('\t' + span.eq(i).text().trim())
        }
    }
}, {
    // deprecated
    name: 'Go',
    enable: flag && false,
    url: 'https://golang.google.cn/doc/devel/release',
    cb: data => {
        let $ = cheerio.load(data)
        let h2 = $('h2').eq(1)
        let ver = h2.attr('id')
        let text = h2.text()
        let match = text.matchAll(/([-\d]+)\)/gm)
        match = [...match]
        let last = match[match.length - 1]
        console.log('\t' + ver + '\t' + last[1])
    }
}, {
    name: 'PHP',
    enable: flag && false,
    url: 'https://www.php.net/',
    cb: data => {
        let $ = cheerio.load(data)
        let as = $('a.hero-version-link')
        for (let i = 0; i < as.length; i++) {
            console.log('\t' + as.eq(i).text().trim())
        }
    }
}, {
    name: 'R',
    enable: flag && false,
    url: 'https://www.r-project.org/',
    cb: data => {
        let $ = cheerio.load(data)
        let lis = $('body > div > div.row > div.col-xs-12.col-sm-7 > ul > li')
        const regex = /(R version \d\.\d\.\d)[\s\S]+?(\d{4}-\d{2}-\d{2})/
        let match = lis.eq(0).text()
            .trim().replace('\n', ' ').match(regex)
        console.log('\t' + match[1] + '\t' + match[2])
    }
}, {
    name: 'Raku',
    enable: flag && false,
    url: 'https://rakudo.org/downloads',
    cb: data => {
        let $ = cheerio.load(data)
        console.log('\t' + $('tr.ver > td').eq(0).text().trim())
    }
},
]
